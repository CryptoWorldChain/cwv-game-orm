package org.brewchain.cwv.dbgens.market.mapper;

import static org.apache.ibatis.jdbc.SqlBuilder.BEGIN;
import static org.apache.ibatis.jdbc.SqlBuilder.DELETE_FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.INSERT_INTO;
import static org.apache.ibatis.jdbc.SqlBuilder.ORDER_BY;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT_DISTINCT;
import static org.apache.ibatis.jdbc.SqlBuilder.SET;
import static org.apache.ibatis.jdbc.SqlBuilder.SQL;
import static org.apache.ibatis.jdbc.SqlBuilder.UPDATE;
import static org.apache.ibatis.jdbc.SqlBuilder.VALUES;
import static org.apache.ibatis.jdbc.SqlBuilder.WHERE;

import java.util.List;
import java.util.Map;
import org.brewchain.cwv.dbgens.market.entity.CWVMarketDraw;
import org.brewchain.cwv.dbgens.market.entity.CWVMarketDrawExample.Criteria;
import org.brewchain.cwv.dbgens.market.entity.CWVMarketDrawExample.Criterion;
import org.brewchain.cwv.dbgens.market.entity.CWVMarketDrawExample;

public class CWVMarketDrawSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cwv_market_draw
     *
     * @mbggenerated Thu Aug 23 16:16:52 CST 2018
     */
    public String countByExample(CWVMarketDrawExample example) {
        BEGIN();
        SELECT("count(*)");
        FROM("cwv_market_draw");
        applyWhere(example, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cwv_market_draw
     *
     * @mbggenerated Thu Aug 23 16:16:52 CST 2018
     */
    public String deleteByExample(CWVMarketDrawExample example) {
        BEGIN();
        DELETE_FROM("cwv_market_draw");
        applyWhere(example, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cwv_market_draw
     *
     * @mbggenerated Thu Aug 23 16:16:52 CST 2018
     */
    public String insertSelective(CWVMarketDraw record) {
        BEGIN();
        INSERT_INTO("cwv_market_draw");
        
        if (record.getDrawId() != null) {
            VALUES("draw_id", "#{drawId,jdbcType=INTEGER}");
        }
        
        if (record.getPropertyId() != null) {
            VALUES("property_id", "#{propertyId,jdbcType=INTEGER}");
        }
        
        if (record.getUserId() != null) {
            VALUES("user_id", "#{userId,jdbcType=INTEGER}");
        }
        
        if (record.getCreateTime() != null) {
            VALUES("create_time", "#{createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getChainRandom() != null) {
            VALUES("chain_random", "#{chainRandom,jdbcType=VARCHAR}");
        }
        
        if (record.getChainStatusRandom() != null) {
            VALUES("chain_status_random", "#{chainStatusRandom,jdbcType=TINYINT}");
        }
        
        if (record.getChainTransHashRandom() != null) {
            VALUES("chain_trans_hash_random", "#{chainTransHashRandom,jdbcType=VARCHAR}");
        }
        
        if (record.getChainStatus() != null) {
            VALUES("chain_status", "#{chainStatus,jdbcType=TINYINT}");
        }
        
        if (record.getChainTransHash() != null) {
            VALUES("chain_trans_hash", "#{chainTransHash,jdbcType=VARCHAR}");
        }
        
        if (record.getChainContract() != null) {
            VALUES("chain_contract", "#{chainContract,jdbcType=VARCHAR}");
        }
        
        if (record.getUserAddress() != null) {
            VALUES("user_address", "#{userAddress,jdbcType=VARCHAR}");
        }
        
        if (record.getPropertyToken() != null) {
            VALUES("property_token", "#{propertyToken,jdbcType=VARCHAR}");
        }
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cwv_market_draw
     *
     * @mbggenerated Thu Aug 23 16:16:52 CST 2018
     */
    public String selectByExample(CWVMarketDrawExample example) {
        BEGIN();
        if (example != null && example.isDistinct()) {
            SELECT_DISTINCT("draw_id");
        } else {
            SELECT("draw_id");
        }
        SELECT("property_id");
        SELECT("user_id");
        SELECT("create_time");
        SELECT("chain_random");
        SELECT("chain_status_random");
        SELECT("chain_trans_hash_random");
        SELECT("chain_status");
        SELECT("chain_trans_hash");
        SELECT("chain_contract");
        SELECT("user_address");
        SELECT("property_token");
        FROM("cwv_market_draw");
        applyWhere(example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            ORDER_BY(example.getOrderByClause());
        }
        
        if(example!=null&&example.getSelectCols()!=null&&example.getSelectCols().trim().length()>0){
		BEGIN();
		if (example != null && example.isDistinct()) {
			SELECT_DISTINCT(example.getSelectCols());
		} else {
				SELECT(example.getSelectCols());
		}
				FROM("cwv_market_draw");				applyWhere(example, false);
		}
        if(example != null){
            if(example.getLimit() !=  Integer.MAX_VALUE && example.getOffset() >=0 ){
                String retstr= SQL().concat(" limit "+example.getOffset()+","+example.getLimit());
                if(example.isForUpdate()) { return retstr+"  FOR UPDATE " ;} else { return retstr;}}
                else if(example.isForUpdate()){  return SQL()+"  FOR UPDATE " ;  }
            }
            return SQL();
        }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cwv_market_draw
     *
     * @mbggenerated Thu Aug 23 16:16:52 CST 2018
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        CWVMarketDraw record = (CWVMarketDraw) parameter.get("record");
        CWVMarketDrawExample example = (CWVMarketDrawExample) parameter.get("example");
        
        BEGIN();
        UPDATE("cwv_market_draw");
        
        if (record.getDrawId() != null) {
            SET("draw_id = #{record.drawId,jdbcType=INTEGER}");
        }
        
        if (record.getPropertyId() != null) {
            SET("property_id = #{record.propertyId,jdbcType=INTEGER}");
        }
        
        if (record.getUserId() != null) {
            SET("user_id = #{record.userId,jdbcType=INTEGER}");
        }
        
        if (record.getCreateTime() != null) {
            SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getChainRandom() != null) {
            SET("chain_random = #{record.chainRandom,jdbcType=VARCHAR}");
        }
        
        if (record.getChainStatusRandom() != null) {
            SET("chain_status_random = #{record.chainStatusRandom,jdbcType=TINYINT}");
        }
        
        if (record.getChainTransHashRandom() != null) {
            SET("chain_trans_hash_random = #{record.chainTransHashRandom,jdbcType=VARCHAR}");
        }
        
        if (record.getChainStatus() != null) {
            SET("chain_status = #{record.chainStatus,jdbcType=TINYINT}");
        }
        
        if (record.getChainTransHash() != null) {
            SET("chain_trans_hash = #{record.chainTransHash,jdbcType=VARCHAR}");
        }
        
        if (record.getChainContract() != null) {
            SET("chain_contract = #{record.chainContract,jdbcType=VARCHAR}");
        }
        
        if (record.getUserAddress() != null) {
            SET("user_address = #{record.userAddress,jdbcType=VARCHAR}");
        }
        
        if (record.getPropertyToken() != null) {
            SET("property_token = #{record.propertyToken,jdbcType=VARCHAR}");
        }
        
        applyWhere(example, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cwv_market_draw
     *
     * @mbggenerated Thu Aug 23 16:16:52 CST 2018
     */
    public String updateByExample(Map<String, Object> parameter) {
        BEGIN();
        UPDATE("cwv_market_draw");
        
        SET("draw_id = #{record.drawId,jdbcType=INTEGER}");
        SET("property_id = #{record.propertyId,jdbcType=INTEGER}");
        SET("user_id = #{record.userId,jdbcType=INTEGER}");
        SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        SET("chain_random = #{record.chainRandom,jdbcType=VARCHAR}");
        SET("chain_status_random = #{record.chainStatusRandom,jdbcType=TINYINT}");
        SET("chain_trans_hash_random = #{record.chainTransHashRandom,jdbcType=VARCHAR}");
        SET("chain_status = #{record.chainStatus,jdbcType=TINYINT}");
        SET("chain_trans_hash = #{record.chainTransHash,jdbcType=VARCHAR}");
        SET("chain_contract = #{record.chainContract,jdbcType=VARCHAR}");
        SET("user_address = #{record.userAddress,jdbcType=VARCHAR}");
        SET("property_token = #{record.propertyToken,jdbcType=VARCHAR}");
        
        CWVMarketDrawExample example = (CWVMarketDrawExample) parameter.get("example");
        applyWhere(example, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cwv_market_draw
     *
     * @mbggenerated Thu Aug 23 16:16:52 CST 2018
     */
    public String updateByPrimaryKeySelective(CWVMarketDraw record) {
        BEGIN();
        UPDATE("cwv_market_draw");
        
        if (record.getPropertyId() != null) {
            SET("property_id = #{propertyId,jdbcType=INTEGER}");
        }
        
        if (record.getUserId() != null) {
            SET("user_id = #{userId,jdbcType=INTEGER}");
        }
        
        if (record.getCreateTime() != null) {
            SET("create_time = #{createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getChainRandom() != null) {
            SET("chain_random = #{chainRandom,jdbcType=VARCHAR}");
        }
        
        if (record.getChainStatusRandom() != null) {
            SET("chain_status_random = #{chainStatusRandom,jdbcType=TINYINT}");
        }
        
        if (record.getChainTransHashRandom() != null) {
            SET("chain_trans_hash_random = #{chainTransHashRandom,jdbcType=VARCHAR}");
        }
        
        if (record.getChainStatus() != null) {
            SET("chain_status = #{chainStatus,jdbcType=TINYINT}");
        }
        
        if (record.getChainTransHash() != null) {
            SET("chain_trans_hash = #{chainTransHash,jdbcType=VARCHAR}");
        }
        
        if (record.getChainContract() != null) {
            SET("chain_contract = #{chainContract,jdbcType=VARCHAR}");
        }
        
        if (record.getUserAddress() != null) {
            SET("user_address = #{userAddress,jdbcType=VARCHAR}");
        }
        
        if (record.getPropertyToken() != null) {
            SET("property_token = #{propertyToken,jdbcType=VARCHAR}");
        }
        
        WHERE("draw_id = #{drawId,jdbcType=INTEGER}");
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cwv_market_draw
     *
     * @mbggenerated Thu Aug 23 16:16:52 CST 2018
     */
    protected void applyWhere(CWVMarketDrawExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            WHERE(sb.toString());
        }
    }
}